{"version":3,"sources":["Form.js","App.js","index.js"],"names":["InitiaState","name","Gender","nameError","futureStores","getMaxVal","values","curVal","maxVal","forEach","val","valCount","count","vals","getPredominatChar","nameString","nameChars","nameProps","split","join","char","toLowerCase","indexOf","push","prop","Form","state","checkInput","setState","HandleSubmit","event","preventDefault","fields","futurePredominantVals","map","store","future","futurePredominantVal","swal","handleChange","target","value","handleBlur","attribute","getAttribute","trim","handleGenderChange","className","onSubmit","this","htmlFor","type","placeholder","id","onChange","onBlur","onClick","href","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAMMA,EAAc,CAChBC,KAAK,GACLC,OAAQ,GACRC,UAAU,IAIVC,EAAe,CAEf,sBACA,+BACA,oCACA,uCAIEC,EAAY,SAACC,GAEf,IAAIC,EAAQC,EAAS,EAerB,OAbAF,EAAOG,SAAQ,SAACC,GAIZ,IAAIC,EAAWD,EAAIE,MAAQF,EAAIE,MAAQF,EAAIG,KAAKD,MAE5CD,EAAWH,IAEXA,EAASG,EAETJ,EAASG,MAGVH,GAGLO,EAAoB,SAACC,GAEvB,IAAIC,EAAY,GAAIC,EAAY,GAwBhC,OAtBAF,EAAWG,MAAM,KAAKC,KAAK,IAAID,MAAM,IAAIT,SAAQ,SAAAW,GAE7CA,EAAOA,EAAKC,cAERL,EAAUM,QAAQF,GAAQ,GAE1BJ,EAAUO,KAAKH,GAEfH,EAAUM,KAAK,CAAEH,OAAMR,MAAM,KAI7BK,EAAUR,SAAQ,SAAAe,GAEVA,EAAKJ,OAASA,GACdI,EAAKZ,cAOdP,EAAUY,IAIAQ,E,4MAEhBC,MAAO1B,E,EAGT2B,WAAa,WACT,IACIxB,EAYL,OAbc,EAAKuB,MAAMzB,OAOpBE,EAAY,yBAMdA,IACC,EAAKyB,SAAS,CAACzB,eACR,I,EASb0B,aAAe,SAACC,GACZA,EAAMC,iBACa,EAAKJ,cAIpB,EAAKC,SAAS5B,GAGlB,IAAIgC,EAAS,EAAKN,MAAMzB,KAIxB,GAAI+B,EAAQ,CACR,IAAIzB,EAASO,EAAkBkB,GAM3BC,EAAwB7B,EAAa8B,KAAI,SAAAC,GAAK,MAC9C,CAAEC,OAAQD,EAAOtB,KAAMC,EAAkBqB,OAGzCE,EAAuBhC,EAAU4B,GAEjC1B,EAAOa,OAASiB,EAAqBxB,KAAKO,KAC1CkB,IAAK,GAAD,OAAKN,EAAL,aAAgBK,EAAqBD,SAG7CE,IAAK,GAAD,OAAIN,GAAS,+C,EAUzBO,aAAa,SAACT,GACX,EAAKF,SAAS,CAAC3B,KAAM6B,EAAMU,OAAOC,S,EAGrCC,WAAY,SAACZ,GAET,IAAMa,EAAYb,EAAMU,OAAOI,aAAa,QAC5C,EAAKhB,SAAL,eAAgBe,EAAWb,EAAMU,OAAOC,MAAMI,U,EAKlDC,mBAAoB,SAAChB,GACjB,EAAKF,SAAS,CAAC1B,OAAO4B,EAAMU,OAAOC,S,uDAKnC,OACI,sBAAKM,UAAU,gBAAf,UACA,oBAAIA,UAAU,UAAd,uBACI,uBAAMC,SAAUC,KAAKpB,aAArB,UACI,qBAAKkB,UAAU,uBAAf,SACI,wBAAOG,QAAQ,OAAf,iBAEI,uBAAOC,KAAK,OAAOC,YAAY,GAAGnD,KAAK,OAAOwC,MAAOQ,KAAKvB,MAAMzB,KAAMoD,GAAG,YAAYC,SAAUL,KAAKV,aACpGgB,OAAQN,KAAKP,aACb,sBAAMK,UAAU,YAAhB,SAA6BE,KAAKvB,MAAMvB,iBAShD,qBAAK4C,UAAU,cAAf,SACA,wBAAOG,QAAQ,SAAf,mBAEI,yBAAQG,GAAG,SAASZ,MAAOQ,KAAKvB,MAAMxB,OAAQoD,SAAUL,KAAKH,mBAA7D,UACI,wCACA,0CACA,oDAOV,wBAAQU,QAASP,KAAKpB,aAAtB,wBAGF,yBAAQkB,UAAU,gBAAlB,UACQ,oBAAGA,UAAU,eAAb,sBAAqC,mBAAGU,KAAK,2BAAR,2BACzC,mBAAGV,UAAU,OAAb,2D,GA5HcW,IAAMC,WC9DzBC,MANf,WACE,OACE,cAAC,EAAD,KCDJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a59a73d9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport swal from \"sweetalert\";\r\n\r\n//setting the default state\r\n\r\n\r\nconst InitiaState = {\r\n    name:\"\",\r\n    Gender: \"\",\r\n    nameError:\"\",\r\n    \r\n}\r\n\r\nlet futureStores = [\r\n\r\n    'You will Marry soon',\r\n    'you will move to London soon',\r\n    'You will get $2000 job next month',\r\n    'You will buy a black benz next year',\r\n    \r\n];\r\n\r\nconst getMaxVal = (values) => {\r\n    //the values we passed here could be anything we decided to assign to it\r\n    let curVal, maxVal = 0;\r\n    //mapped through array of values\r\n    values.forEach((val) => {\r\n        //Looping through the values which here could be the futures or name of user and returning a function with val\r\n        // console.log(val.count)\r\n        //if its val.count return, else return val.vals.\r\n        let valCount = val.count ? val.count : val.vals.count;\r\n        //console.log(valCount)\r\n        if (valCount > maxVal) {\r\n            \r\n            maxVal = valCount;\r\n            //console.log(maxVal)\r\n            curVal = val;\r\n        }\r\n    })\r\n    return curVal\r\n}\r\n\r\nconst getPredominatChar = (nameString) => {\r\n    //Here ths function gets the predominant characters in a users name\r\n    let nameChars = [], nameProps = [];\r\n\r\n    nameString.split(' ').join('').split('').forEach(char => {\r\n        //foreach loops through the users name and return them a string\r\n        char = char.toLowerCase();\r\n        //sort through the nameChar array of char with index less than zero\r\n        if (nameChars.indexOf(char) < 0) {\r\n            //push the name that is less than zero to this nameChars Array\r\n            nameChars.push(char)\r\n            //Push a destructured object of char(which are the names) and the count\r\n            nameProps.push({ char, count:1 })\r\n\r\n\r\n        } else {\r\n            nameProps.forEach(prop => {\r\n                //console.log(prop)\r\n                if (prop.char === char)\r\n                    prop.count++;\r\n            })\r\n            \r\n               \r\n        }\r\n\r\n    });\r\n    return getMaxVal(nameProps)\r\n};\r\n\r\n\r\nexport default class Form extends React.Component{\r\n\r\n     state= InitiaState;\r\n\r\n    \r\n   checkInput = ()=>{\r\n       let fields = this.state.name;\r\n       let nameError;\r\n       //let regx = /^[a-zA-Z]+$/;\r\n       let formIsValid= true;\r\n     \r\n\r\n       if(!fields){\r\n           nameError = \"Name cannot be blank\"\r\n       }\r\n\r\n      /* if(fields.match(regx)){\r\n           nameError = \"Name Is Invalid\"\r\n       } */\r\n      if(nameError){\r\n          this.setState({nameError})\r\n          return false;\r\n      }\r\n      \r\n\r\n      return formIsValid\r\n    \r\n   }\r\n\r\n    //This function here handles the submission of the form, the onsubmit evenlistener is attached to this function\r\n    HandleSubmit = (event)=>{\r\n        event.preventDefault();\r\n        const ValidInput = this.checkInput()\r\n        if(ValidInput){\r\n           // console.log(this.state)\r\n            //To clear the form onsubmit\r\n            this.setState(InitiaState)\r\n            //console.log(this.state.name)\r\n        }  \r\n        let fields = this.state.name;\r\n        //fields = this.checkInput(name);\r\n        //console.log(fields)\r\n\r\n        if (fields) {\r\n            let curVal = getPredominatChar(fields);\r\n          // console.log(namePredominantVal)\r\n\r\n\r\n            //Here we are getting the predominant future\r\n\r\n            let futurePredominantVals = futureStores.map(store => (\r\n                { future: store, vals: getPredominatChar(store) }\r\n            ));\r\n\r\n            let futurePredominantVal = getMaxVal(futurePredominantVals);\r\n\r\n            if (curVal.char === futurePredominantVal.vals.char) {\r\n                swal( `${fields}, ${futurePredominantVal.future}`);\r\n            }\r\n            else{\r\n            swal(`${fields}`,'Please we do not have a response for you.')\r\n            }\r\n        }\r\n\r\n        \r\n\r\n        \r\n        \r\n    }\r\n\r\n    handleChange=(event)=>{\r\n       this.setState({name: event.target.value})\r\n       \r\n    }\r\n    handleBlur =(event)=>{\r\n        //This handles the triming of white spaces\r\n        const attribute = event.target.getAttribute('name')\r\n        this.setState({[attribute]:event.target.value.trim()})\r\n        \r\n        \r\n    }\r\n    \r\n    handleGenderChange =(event)=>{\r\n        this.setState({Gender:event.target.value})\r\n        \r\n    } \r\n\r\n    render(){\r\n        return(\r\n            <div className=\"search-params\">\r\n            <h1 className=\"heading\">Yo Future</h1>\r\n                <form onSubmit={this.HandleSubmit}>\r\n                    <div className=\"form-control success\">\r\n                        <label htmlFor=\"name\">\r\n                            Name\r\n                            <input type=\"text\" placeholder=\"\" name=\"name\" value={this.state.name} id=\"Input-tag\" onChange={this.handleChange}\r\n                            onBlur={this.handleBlur}/>\r\n                            <span className=\"nameError\">{this.state.nameError}</span>\r\n                           \r\n\r\n                            \r\n                        </label>\r\n                        \r\n                        \r\n                    </div>\r\n                    \r\n                    <div className=\"form-gender\">\r\n                    <label htmlFor=\"gender\">\r\n                        Gender\r\n                        <select id=\"gender\" value={this.state.Gender} onChange={this.handleGenderChange}>\r\n                            <option>..</option>\r\n                            <option>Male</option>\r\n                            <option>Female</option>\r\n                            \r\n                        </select>\r\n                    </label>\r\n                        \r\n                    </div>\r\n                    \r\n                  <button onClick={this.HandleSubmit}>Submit </button>\r\n                </form>\r\n\r\n                <footer className=\"footer_header\">\r\n                        <p className=\"footer_Intro\">Built by <a href=\"https://twitter.com/home\">Chris Uche</a></p>\r\n                    <p className=\"copy\">Copyright 2021. All Rights Reserved</p>\r\n                </footer>\r\n\r\n            </div>\r\n\r\n          \r\n                \r\n        \r\n        )\r\n    }\r\n\r\n\r\n\r\n}","\nimport './Style.css';\nimport Form from \"./Form\";\n\nfunction App() {\n  return (\n    <Form/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}